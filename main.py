import streamlit as st
import pandas as pd
import sqlite3
import nltk
from nltk.corpus import brown
from collections import Counter

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ—Ä–ø—É—Å–∞ Brown
nltk.download('brown')

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞—Ç–∞—Å–µ—Ç–∞ —Å —á–∞—Å—Ç–æ—Ç–∞–º–∏ —Å–ª–æ–≤
def generate_dataset(num_rows):
    words = brown.words()
    words = [word.lower() for word in words if word.isalpha()]
    word_freq = Counter(words)
    most_common_words = word_freq.most_common(num_rows)

    df = pd.DataFrame(most_common_words, columns=['word', 'frequency'])
    df['already_known'] = False  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ already_known
    return df

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect('DB_streamlit_translate.db')

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∫–æ–ª–æ–Ω–∫–æ–π Frequency
with conn:
    conn.execute('''
        CREATE TABLE IF NOT EXISTS english_dictionary (
            word TEXT, 
            already_known BOOLEAN,
            frequency INTEGER
        );
    ''')

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def load_data(conn):
    df = pd.read_sql_query('SELECT * FROM english_dictionary', conn)
    if not df.empty:
        df['already_known'] = df['already_known'].astype(bool)
    return df

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Streamlit
st.set_page_config(layout="centered", page_title="Data Editor", page_icon="üßÆ")
st.title("–õ–∏—á–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤")

df_personal_dictionary = load_data(conn)
if df_personal_dictionary.empty:
    if st.button('Generate New Word List'):
        df_personal_dictionary = generate_dataset(1000)
        df_personal_dictionary.to_sql('english_dictionary', conn, if_exists='replace', index=False)
        st.write("–ù–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
def save_to_database(df, conn):
    with conn:
        df.to_sql('english_dictionary', conn, if_exists='replace', index=False)
        st.success("Data saved to database successfully!")

with st.form("data_editor_form"):
    edited = st.data_editor(df_personal_dictionary, use_container_width=True)
    submit_button = st.form_submit_button("–í–Ω–µ—Å—Ç–∏ –ø—Ä–∞–≤–∫–∏")

if submit_button:
    save_to_database(edited, conn)
    st.expander("Edited dataset", expanded=True).dataframe(edited, use_container_width=True)
    st.experimental_rerun()

conn.close()

